stages:
  - check-and-create-mr
  - lint
  - test
  - build
  - post-processing

variables:
  CI_LINTER_IMG: "mtr.devops.telekom.de/osc/common/pipeline-community/osc-gitlab-runner-linter:alpine-latest-0.8"
  GO_BUILD_IMG: "mtr.devops.telekom.de/osc/onmetal/container-images/go:libvirt-provider-go-1.23.2-alpine-3.20.3"
  PODMAN_IMG: "${OSC_HOST}/osc/onmetal/tools/releaser:v1.0.10"
  synchronizeImage: mtr.devops.telekom.de/osc/upstream/synchronization/gitlab:v5.1.0-alpine

default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - job_execution_timeout

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\..*/

file-lint:
  stage: lint
  needs: []
  variables:
    FILES_LINT_CONFIG: './.linter-config/file-lint.conf'
  tags:
    - docker
    - pes
    - osc
    - ffm
  image: "${CI_LINTER_IMG}"
  script:
    - if [[ ${PIPELINE_DEBUG} == 1 ]]; then debug_flag="-x"; fi
    - if [[ -f "${FILES_LINT_CONFIG}" ]]; then cfg="--config ${FILES_LINT_CONFIG}"; fi
    - echo "${cfg}"
    - bash ${debug_flag} file-empty ${cfg} --path .
    - bash ${debug_flag} file-cr ${cfg} --path .
    - bash ${debug_flag} file-crlf ${cfg} --path .
    - bash ${debug_flag} file-nullbyte ${cfg} --path .
    - bash ${debug_flag} file-trailing-single-newline ${cfg} --path .
    - bash ${debug_flag} file-trailing-space ${cfg} --path .
    - bash ${debug_flag} file-utf8 ${cfg} --path .
    - bash ${debug_flag} file-utf8-bom ${cfg} --path .

yaml-lint:
  stage: lint
  needs: []
  variables:
    YAML_LINT_CONFIG: './.linter-config/yamllint.yaml'
  tags:
    - docker
    - pes
    - osc
    - ffm
  image: "${CI_LINTER_IMG}"
  script:
    - |
      if [[ -f "${YAML_LINT_CONFIG}" ]]; then
        cfg="-c ${YAML_LINT_CONFIG}"
      fi
      yamllint -f colored ${cfg} . && echo "Linting was successful."
  rules:
    - exists:
        - "**/*.yaml"
        - "**/*.yml"

markdown-lint:
  stage: lint
  needs: []
  variables:
    MARKDOWN_LINT_CONFIG: './.linter-config/mdlrc'
    MARKDOWN_LINT_IGNORE_CONFIG: "./.linter-config/.markdownlintignore"
  tags:
    - docker
    - pes
    - osc
    - ffm
  image: "${CI_LINTER_IMG}"
  script:
    - |
      # copy markdown ignore config if exists
      if [[ -f "${MARKDOWN_LINT_IGNORE_CONFIG}" ]]; then
        cp "${MARKDOWN_LINT_IGNORE_CONFIG}" .
      fi
      if [[ -f "${MARKDOWN_LINT_CONFIG}" ]]; then
        cfg="--config ${MARKDOWN_LINT_CONFIG}"
      fi
      { find -iname '*.md' -type f \
        | xargs markdownlint ${cfg}; } && echo "Linting was successful."
  rules:
    - exists:
        - "**/*.md"

go-lint:
  stage: lint
  needs: []
  tags:
    - docker
    - pes
    - osc
    - ffm
  image:
    name: "${GO_BUILD_IMG}"
    entrypoint: ["/bin/ash", "-c"]
  script:
    - |
      apk update
      make lint

unit-tests:
  stage: test
  tags:
    - docker
    - pes
    - osc
    - ffm
  image:
    name: "${GO_BUILD_IMG}"
    entrypoint: ["/bin/ash", "-c"]
  script:
    - |
      apk update
      make test

build:
  stage: build
  tags:
    - podman-node
  image: "${PODMAN_IMG}"
  script:
    - |
      apt-get update
      apt-get install -y \
        librados2 \
        librbd1 \
        librados-dev \
        librbd-dev \
        make
      echo 'unqualified-search-registries = ["docker.io"]' > /etc/containers/registries.conf
      CONTAINER_TOOL='podman --remote --url "unix:///run/podman/podman.sock"' CONTAINER_BUILDARGS="--platform linux/amd64 --build-arg TARGETOS=linux --build-arg TARGETARCH=amd64" make docker-build

include:
  - component: 'gitlab.devops.telekom.de/cas-devs/osc/common/pipeline-community/components/mtr/configure-repo@stable'
    inputs:
      image-list-type: 'none'
      version: 'stable'
      stage: 'post-processing'

check-dependabot-commits:
  stage: check-and-create-mr
  tags:
    - docker
    - pes
    - osc
    - ffm
  image:
    name: $synchronizeImage
    entrypoint: [""]
  variables:
    PYTHON_GITLAB_CFG: "$GITLAB_CFG"
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
    AUTHOR_ID: 85862
    PROJECT_ID: 238349
    REVIEWER_IDS: "40056,26108"
    GITLAB_TIMEOUT: 10
  script:
    - |
      #!/usr/bin/env bash

      set -euo pipefail

      function fetch_open_merge_requests() {
          echo "Fetching open merge requests..."
          gitlab -o json project-merge-request list --project-id="$PROJECT_ID" --state=opened --author-id="$AUTHOR_ID" | jq -r 'map(.title) | .[]'
      }

      function should_process_commit() {
        local commit_hash="$1"
        local commit_message="$2"
        local commit_date="$3"
        local branch_name="sync-$commit_hash"

        if git --no-pager log --pretty=format:"%s %ad%n" --date="format:%Y-%m-%dT%H:%M:%S" | grep -q -F "$commit_message $commit_date"; then
          echo -e "\033[32mCommit message '$commit_message' with date '$commit_date' already exists in the repo. Skipping...\033[0m"
          return 1
        fi

        if echo "$existing_mrs" | grep -qF "$commit_message"; then
            echo -e "\033[32mMerge request with title '$commit_message' already exists. Skipping...\033[0m"
            return 1
        fi

        return 0
      }

      function create_merge_request() {
          local branch_name="$1"
          local commit_message="$2"
          local commit_hash="$3"
          gitlab --timeout="$GITLAB_TIMEOUT" project-merge-request create \
              --project-id="$PROJECT_ID" \
              --source-branch="${branch_name}" \
              --target-branch=osc/main \
              --title="$commit_message" \
              --description="Please merge ${commit_hash} of upstream" \
              --squash=true \
              --remove-source-branch=true \
              --reviewer-ids="$REVIEWER_IDS" >/dev/null
      }

      function handle_commit() {
        local commit_hash="$1"
        local commit_message="$2"

        local branch_name="sync-$commit_hash"


        if git branch -a | grep -q "$branch_name"; then
          create_merge_request "$branch_name" "$commit_message" "$commit_hash"
          return 0
        fi

        git switch osc/main --quiet

        git switch -c "$branch_name" --quiet
        if ! git cherry-pick "$commit_hash" --ff --quiet &>/dev/null; then
          # add conflicted changes
          git add $(git diff --name-only --diff-filter=U)
          git cherry-pick --continue
        fi
        git push origin "$branch_name" --quiet

        create_merge_request "$branch_name" "$commit_message" "$commit_hash"
      }

      echo "Setting up Git configuration..."
      git config --global user.email "users.noreply.gitlab.com"
      git config --global user.name "sync user"
      git remote set-url origin https://oauth2:${CI_PUSH_TOKEN}@gitlab.devops.telekom.de/cas-devs/osc/upstream/ironcore-dev/libvirt-provider.git
      git fetch --all --quiet

      git switch main --quiet

      mapfile -t commits < <(git --no-pager log --since="7 days ago"  --pretty="format:%H %cd %s" --date="format:%Y-%m-%dT%H:%M:%S")

      commits_count=${#commits[@]}
      if [ $commits_count -eq 0 ]; then
        echo "No commits found in the last 7 days."
        exit 0
      fi

      existing_mrs=$(fetch_open_merge_requests)

      for commit in "${commits[@]}"; do
          commit_hash=$(echo "$commit" | cut -d' ' -f1)
          commit_date=$(echo "$commit" | cut -d' ' -f2)
          commit_message=$(echo "$commit" | cut -d' ' -f3-)

          git switch osc/main --quiet

          if should_process_commit "$commit_hash" "$commit_message" "$commit_date"; then
              handle_commit "$commit_hash" "$commit_message"
          fi
      done
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
