stages:
  - lint
  - test
  - build
  - post-processing

variables:
  CI_LINTER_IMG: "mtr.devops.telekom.de/osc/common/pipeline-community/osc-gitlab-runner-linter:alpine-latest-0.8"
  GO_BUILD_IMG: "mtr.devops.telekom.de/osc/onmetal/container-images/go:libvirt-provider-go-1.23.2-alpine-3.20.3"
  PODMAN_IMG: "${OSC_HOST}/osc/onmetal/tools/releaser:v1.0.10"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\..*/

file-lint:
  stage: lint
  needs: []
  variables:
    FILES_LINT_CONFIG: './.linter-config/file-lint.conf'
  tags:
    - docker
    - pes
    - osc
  image: "${CI_LINTER_IMG}"
  script:
    - if [[ ${PIPELINE_DEBUG} == 1 ]]; then debug_flag="-x"; fi
    - if [[ -f "${FILES_LINT_CONFIG}" ]]; then cfg="--config ${FILES_LINT_CONFIG}"; fi
    - echo "${cfg}"
    - bash ${debug_flag} file-empty ${cfg} --path .
    - bash ${debug_flag} file-cr ${cfg} --path .
    - bash ${debug_flag} file-crlf ${cfg} --path .
    - bash ${debug_flag} file-nullbyte ${cfg} --path .
    - bash ${debug_flag} file-trailing-single-newline ${cfg} --path .
    - bash ${debug_flag} file-trailing-space ${cfg} --path .
    - bash ${debug_flag} file-utf8 ${cfg} --path .
    - bash ${debug_flag} file-utf8-bom ${cfg} --path .

yaml-lint:
  stage: lint
  needs: []
  variables:
    YAML_LINT_CONFIG: './.linter-config/yamllint.yaml'
  tags:
    - docker
    - pes
    - osc
  image: "${CI_LINTER_IMG}"
  script:
    - |
      if [[ -f "${YAML_LINT_CONFIG}" ]]; then
        cfg="-c ${YAML_LINT_CONFIG}"
      fi
      yamllint -f colored ${cfg} . && echo "Linting was successful."
  rules:
    - exists:
        - "**/*.yaml"
        - "**/*.yml"

markdown-lint:
  stage: lint
  needs: []
  variables:
    MARKDOWN_LINT_CONFIG: './.linter-config/mdlrc'
    MARKDOWN_LINT_IGNORE_CONFIG: "./.linter-config/.markdownlintignore"
  tags:
    - docker
    - pes
    - osc
  image: "${CI_LINTER_IMG}"
  script:
    - |
      # copy markdown ignore config if exists
      if [[ -f "${MARKDOWN_LINT_IGNORE_CONFIG}" ]]; then
        cp "${MARKDOWN_LINT_IGNORE_CONFIG}" .
      fi
      if [[ -f "${MARKDOWN_LINT_CONFIG}" ]]; then
        cfg="--config ${MARKDOWN_LINT_CONFIG}"
      fi
      { find -iname '*.md' -type f \
        | xargs markdownlint ${cfg}; } && echo "Linting was successful."
  rules:
    - exists:
        - "**/*.md"

go-lint:
  stage: lint
  needs: []
  tags:
    - docker
    - pes
    - osc
  image:
    name: "${GO_BUILD_IMG}"
    entrypoint: ["/bin/ash", "-c"]
  script:
    - |
      apk update
      make lint

unit-tests:
  stage: test
  tags:
    - docker
    - pes
    - osc
  image:
    name: "${GO_BUILD_IMG}"
    entrypoint: ["/bin/ash", "-c"]
  script:
    - |
      apk update
      make test

build:
  stage: build
  tags:
    - podman-node
  image: "${PODMAN_IMG}"
  script:
    - |
      apt-get update
      apt-get install -y \
        librados2 \
        librbd1 \
        librados-dev \
        librbd-dev \
        make
      echo 'unqualified-search-registries = ["docker.io"]' > /etc/containers/registries.conf
      CONTAINER_TOOL='podman --remote --url "unix:///run/podman/podman.sock"' CONTAINER_BUILDARGS="--platform linux/amd64 --build-arg TARGETOS=linux --build-arg TARGETARCH=amd64" make docker-build

include:
  - component: 'gitlab.devops.telekom.de/cas-devs/osc/common/pipeline-community/components/mtr/configure-repo@stable'
    inputs:
      image-list-type: 'none'
      version: 'stable'
      stage: 'post-processing'
